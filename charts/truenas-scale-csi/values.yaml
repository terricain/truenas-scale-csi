
settings:
  type: "nfs" # either `nfs` or `iscsi`

  # defaults to sane unix socket
  endpoint: null

  # -- TrueNAS API URL, e.g. http://192.168.69.69:1339/api/v2.0
  url: ""

  # -- TrueNAS dataset path, create a dataset for dynamically provisioned NFS datasets to
  # be stored under. The path is essentially the name of the storage pool and then any datasets
  # in a directory sort of layout. The following command will list all paths:
  #   curl -s -X GET "http://NAS/api/v2.0/pool/dataset" -H "Authorization: Bearer API_TOKEN" | jq '.[].id'
  nfsStoragePath: ""
  iscsiStoragePath: ""

  # -- TrueNAS portal ID for iSCSI
  #   curl -s -X GET "http://nas01/api/v2.0/iscsi/portal" -H "Authorization: Bearer ${TOKEN}" | jq '.'
  portalID: ""

  verbosity: 4

  # -- TrueNAS Access Token secret, should have a field of "token"
  accessTokenSecretName: ""

  # -- If set to true, will ignore TLS when connecting to TrueNAS
  ignoreTLS: false

  # -- Timeout on running actions, useful if TrueNAS is being slow.
  sidecarTimeout: 60s

storageClass:
  create: true
  annotations: {}
  namePrefix: "truenas-" # Will either be truenas-nfs or truenas-iscsi

# ---
image:
  repository: ghcr.io/terrycain/truenas-scale-csi
  pullPolicy: IfNotPresent
  tag: ""

sidecars:
  provisioner:
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
  attacher:
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
  nodeDriverRegistrar:
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
  livenessProbe:
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

nodeSelector: {}

tolerations: []

affinity: {}

controller:
  # More than 1 is not supported yet.
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  securityContext:
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
  resources: {}

node:
  podAnnotations: {}
  # The node pod must be run as root to handle NFS and iSCSI mounts
  # See the sidecar security contexts for more finegrained permissioning
  podSecurityContext:
    runAsNonRoot: false
    runAsUser: 0
    runAsGroup: 0
    fsGroup: 0
  securityContext:
    readOnlyRootFilesystem: true
    privileged: true
    capabilities:
      add: [ "SYS_ADMIN" ]
  resources: {}

nfsCSIDriverName: "nfs.truenas-scale.terrycain.github.com"
iscsiCSIDriverName: "iscsi.truenas-scale.terrycain.github.com"
